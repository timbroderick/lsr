# set up the gathering frame
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
#print( c(x,flip) )
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind)
}
print("cointoss ready")
}
flipsN(17)
View(cointoss)
# set directory
setwd("~/anaconda3/envs/lsr/chapter_9_probability")
# load libraries
library(tidyverse)
options("scipen" = 10)
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
#flip=integer(),
#result=integer()
flip=integer(),
result=character(),
stringsAsFactors=FALSE
)
# set up the gathering frame
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
#print( c(x,flip) )
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind)
}
print("cointoss ready")
}
flipsN(17)
View(cointoss)
flipcount <- cointoss %>%
group_by(result) %>%
summarize(count=n)
flipcount <- cointoss %>%
group_by(result) %>%
summarize(count=n())
View(flipcount)
flipsN(10)
cointoss %>%
group_by(result) %>%
summarize(count=n())
flipsN(100)
cointoss %>%
group_by(result) %>%
summarize(count=n())
flipsN(100)
cointoss %>%
group_by(result) %>%
summarize(count=n())
flipsN(100)
cointoss %>%
group_by(result) %>%
summarize(count=n())
flipsN(100)
cointoss %>%
group_by(result) %>%
summarize(count=n())
flipsN(100)
cointoss %>%
group_by(result) %>%
summarize(count=n())
flipsN(100)
cointoss %>%
group_by(result) %>%
summarize(count=n())
flipsN(100)
cointoss %>%
group_by(result) %>%
summarize(count=n())
flipsN(100)
cointoss %>%
group_by(result) %>%
summarize(count=n())
flipsN(100)
cointoss %>%
group_by(result) %>%
summarize(count=n())
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
#flip=integer(),
#result=integer()
flip=integer(),
result=character(),
stringsAsFactors=FALSE
)
# set up the gathering frame
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
#print( c(x,flip) )
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind)
}
cointoss %>%
group_by(result) %>%
summarize(count=n())
print("cointoss ready")
}
flipsN(100)
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
#flip=integer(),
#result=integer()
flip=integer(),
result=character(),
stringsAsFactors=FALSE
)
# set up the gathering frame
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
#print( c(x,flip) )
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind)
}
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
}
flipsN(100)
flipsN(1000)
flipsN(1000)
flipsN(1000)
flipsN(1000)
flipsN(1000)
flipsN(1000)
flipsN(10000)
flipsN(10000)
flipsN(10000)
flipsN(100000)
flipsN(100)
flipsN(100)
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
}
flipsN(100)
flipsN(100)
flipsN(100)
flipsN(100)
flipsN(100)
View(cointoss)
cointoss$flip[5]
cointoss$result[5]
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
print(cointoss$result[x])
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
}
flipsN(10)
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
cointoss$check[x] <- cointoss$result[x]
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
}
flipsN(10)
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
proportion=numeric(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 3, nrow = 1)),c("flip","result","proportion"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
cointoss$proportion[x] <- cointoss$flip[x]
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
}
flipsN(10)
View(cointoss)
View(flipcount)
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
proportion=numeric(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 3, nrow = 1)),c("flip","result","proportion"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
cointoss$proportion[x] <- x
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
}
flipsN(10)
View(cointoss)
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
}
flipsN(10)
View(cointoss)
flipsN(10)
flipsN(10)
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
}
}
flipsN(10)
return(sumthis)
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
}
flipsN(10)
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
print(dfbind$result)
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
}
flipsN(10)
flipsN(12)
flipsN(12)
flipsN(12)
flipsN(12)
flipsN(12)
craps(12)
craps <- function(N=1) {
sample.space <- c("2","3","4","5","6","7","8","9","10","11","12")
theta <- 0.0909 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
}
}
craps(12)
