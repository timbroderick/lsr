prob = c(theta, theta, theta, theta, theta, theta))
dfbind$dice <- x
dfbind$result <- roll
dice <<- bind_rows(dice,dfbind) # and in the darkness bind them
}
print(dice)
print(Total is dice$result[1]+dice$result[2])
}
craps <- function(N=1) {
sample.space <- c(1,2,3,4,5,6)
theta <- 0.1667
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
dice <<- data.frame(
dice=integer(),
result=numeric(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("dice","result"))
# the while loop
x <- 0
while ( x <= N ) {
x <- x + 1
roll <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, theta, theta, theta, theta, theta))
dfbind$dice <- x
dfbind$result <- roll
dice <<- bind_rows(dice,dfbind) # and in the darkness bind them
}
print(dice)
print("Total is"&dice$result[1]+dice$result[2])
}
craps()
craps <- function(N=1) {
sample.space <- c(1,2,3,4,5,6)
theta <- 0.1667
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
dice <<- data.frame(
dice=integer(),
result=numeric(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("dice","result"))
# the while loop
x <- 0
while ( x <= N ) {
x <- x + 1
roll <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, theta, theta, theta, theta, theta))
dfbind$dice <- x
dfbind$result <- roll
dice <<- bind_rows(dice,dfbind) # and in the darkness bind them
}
print(dice)
totl <- dice$result[1]+dice$result[2]
print(paste("Total is",totl ),quote=FALSE)
}
craps()
craps()
craps()
coin.flip(flips = 1000, p.head = 0.5, interval = 0.01, show.coin = TRUE)
?coin
install.packages(coin.flip)
install.packages(coin)
install.packages("coin.flip")
install.packages(Rdice)
install_github("gennaro-tedesco/Rdice")
load("/Users/tbroderick/Downloads/chapek9.Rdata")
View(chapek9)
dbinom( x = 4, size = 20, prob = 1/6 )
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
# calculates the likelyhood of any event
#dbinom( x = 4, size = N, prob = 1/2 )
}
flipsN(12)
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
dbinom( x = 5, size = 12, prob = 1/2 )
View(sumthis)
sumthis$count[1]
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
# calculates the likelyhood of any event
#dbinom( x = 4, size = N, prob = 1/2 )
}
flipsN(12)
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
sumthis$count[1]
dbinom( x = 5, size = 12, prob = 1/2 )
dbinom( x = sumthis$count[1], size = 12, prob = 1/2 )
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
return(sumthis)
# calculates the likelyhood of getting this many tails
likelyhood <- dbinom( x = sumthis$count[1], size = N, prob = 1/2 )
print(paste("Heads probability: ",round(likelyhood*100,2),"%" ),quote=FALSE)
}
flipsN(12)
flipsN(12)
flipsN <- function(N) {
sample.space <- c("Heads","Tails")
theta <- 0.5 # this is a fair coin toss
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
cointoss <<- data.frame(
flip=integer(),
result=character(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("flip","result"))
# the while loop
x <- 0
while ( x <= (N-1) ) {
x <- x + 1
flip <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, 1 - theta))
dfbind$flip <- x
dfbind$result <- sapply(flip,as.character)
cointoss <<- bind_rows(cointoss,dfbind) # and in the darkness bind them
}
# now count and return the results
sumthis <- cointoss %>%
group_by(result) %>%
summarize(count=n())
# calculates the likelyhood of getting this many tails
likelyhood <- dbinom( x = sumthis$count[1], size = N, prob = 1/2 )
print(paste("Heads probability: ",round(likelyhood*100,2),"%" ),quote=FALSE)
return(sumthis)
}
flipsN(12)
flipsN(12)
flipsN(12)
flipsN(12)
flipsN(12)
flipsN(100)
flipsN(100)
flipsN(100)
flipsN(100)
flipsN(100)
flipsN(100)
flipsN(1000)
View(cointoss)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
flipsN(20)
rbinom( n = 100, size = 20, prob = 1/2 )
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- rbinom( n = 100, size = 20, prob = 1/2 )
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- as.dataframe( rbinom( n = 100, size = 20, prob = 1/2 ) )
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- as.data.frame( rbinom( n = 100, size = 20, prob = 1/2 ) )
View(flipps)
?as.data.frame
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- as.data.frame( rbinom( n = 100, size = 20, prob = 1/2 ),"flips" )
View(flipps)
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- as.data.frame( rbinom( n = 100, size = 20, prob = 1/2 ),c("flips") )
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- as.data.frame( rbinom( n = 100, size = 20, prob = 1/2 ),col.names=c("flips") )
View(flipps)
View(flipps)
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- as.data.frame( rbinom( n = 100, size = 20, prob = 1/2 ),col.names=c("flips") )
View(flipps)
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- as.data.frame( rbinom( n = 100, size = 20, prob = 1/2 ),col.names="flips" )
View(flipps)
colnames(flips) <- c("flips")
View(flipps)
colnames(flipps) <- c("flips")
View(flipps)
flipps$set <- c(1:100)
View(flipps)
qplot(flips,
data=flipps,
bins = 20
)
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- as.data.frame( rbinom( n = 100, size = 20, prob = 1/2 ) )
colnames(flipps) <- c("flips")
flipps$set <- c(1:100)
qplot(flips,
data=flipps,
bins = 20
)
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- as.data.frame( rbinom( n = 100, size = 20, prob = 1/2 ) )
colnames(flipps) <- c("flips")
flipps$set <- c(1:100)
qplot(flips,
data=flipps,
bins = 20
)
craps()
craps <- function(N=1) {
sample.space <- c(1,2,3,4,5,6)
theta <- 0.1667
# set up the final dataframe
# <<- makes it a global df so that we see it outside the function
dice <<- data.frame(
dice=integer(),
result=numeric(),
stringsAsFactors=FALSE # gets rid of any problem with coercing types
)
# set up the df that gathers the results
dfbind <- setNames(data.frame(matrix(ncol = 2, nrow = 1)),c("dice","result"))
# the while loop
x <- 0
while ( x <= N ) {
x <- x + 1
roll <- sample(sample.space,
size = 1,
replace = TRUE,
prob = c(theta, theta, theta, theta, theta, theta))
dfbind$dice <- x
dfbind$result <- roll
dice <<- bind_rows(dice,dfbind) # and in the darkness bind them
}
print(dice)
totl <- dice$result[1]+dice$result[2]
print(paste("Total is",totl ),quote=FALSE)
}
craps()
craps()
craps()
qplot(flips,
data=flipps,
fill=blue,
bins = 20
)
qplot(flips,
data=flipps,
fill="blue",
bins = 20
)
qplot(flips,
data=flipps,
color="blue",
bins = 20
)
qplot(flips,
data=flipps,
fill=flips,
bins = 20
)
qplot(flips,
data=flipps,
color= = I("red"),
bins = 20
)
qplot(flips,
data=flipps,
color= I("red"),
bins = 20
)
qplot(flips,
data=flipps,
fill= I("red"),
bins = 20
)
qplot(flips,
data=flipps,
fill= I("blue"),
bins = 20
)
qplot(flips,
data=flipps,
fill= I("bluegray"),
bins = 20
)
qplot(flips,
data=flipps,
fill= I("cadetblue"),
bins = 20
)
qplot(flips,set,
data=flipps,
fill= I("cadetblue"),
bins = 20
)
qplot(flips,
data=flipps,
fill= I("cadetblue"),
bins = 20
)
qplot(flips,
data=flipps,
fill= I("cadetblue")#,
#bins = 20
)
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- as.data.frame( rbinom( n = 100, size = 20, prob = 1/2 ) )
colnames(flipps) <- c("flips")
flipps$set <- c(1:100)
qplot(flips,
data=flipps,
fill= I("cadetblue")#,
#bins = 20
)
qplot(flips,
data=flipps,
fill= I("cadetblue"),
bins = 20
)
qplot(flips,
data=flipps,
fill= I("cadetblue")
)
qplot(flips,
data=flipps,
fill= I("cadetblue"),
binwidth = 20
)
qplot(flips,
data=flipps,
fill= I("cadetblue"),
bins = 30
)
# rbinom simulates a probability experiment n times
# in this case the result of flipping a coin (prob=1/2)
# twenty times (size) and doing that 100 times (n)
flipps <- as.data.frame( rbinom( n = 100, size = 20, prob = 1/2 ) )
colnames(flipps) <- c("flips")
flipps$set <- c(1:100)
qplot(flips,
data=flipps,
fill= I("cadetblue"),
bins = 30
)
?rnorm
rnorm(100)
normflips <- as.data.frame( rnorm( n = 100 ) )
colnames(normflips) <- c("flips")
normflips$set <- c(1:100)
qplot(flips,
data=normflips,
fill= I("cadetblue"),
bins = 30
)
ggplot(normflips, aes(x = flips)) +
geom_histogram(aes(y =..density..),
breaks = seq(-50, 50, by = 10),
fill = "cadetblue") +
stat_function(fun = dnorm, args = list(mean = mean(normflips$flips), sd = sd(normflips$flips)))
normflips <- as.data.frame( rnorm( n = 1000 ) )
colnames(normflips) <- c("flips")
normflips$set <- c(1:1000)
ggplot(normflips, aes(x = flips)) +
geom_histogram(aes(y =..density..),
breaks = seq(-50, 50, by = 10),
fill = "cadetblue") +
stat_function(fun = dnorm, args = list(mean = mean(normflips$flips), sd = sd(normflips$flips)))
ggplot(normflips, aes(x = flips)) +
geom_histogram(aes(y =..density..),
breaks = seq(-5, 5, by = 1),
fill = "cadetblue") +
stat_function(fun = dnorm, args = list(mean = mean(normflips$flips), sd = sd(normflips$flips)))
ggplot(normflips, aes(x = flips)) +
geom_histogram(aes(y =..density..),
#breaks = seq(-5, 5, by = 1),
fill = "cadetblue") +
stat_function(fun = dnorm, args = list(mean = mean(normflips$flips), sd = sd(normflips$flips)))
ggplot(normflips, aes(x = flips)) +
geom_histogram(aes(y =..density..),
bins=30,
fill = "cadetblue") +
stat_function(fun = dnorm, args = list(mean = mean(normflips$flips), sd = sd(normflips$flips)))
# same thing, but using a normal distribution
normflips <- as.data.frame( rnorm( n = 1000 ) )
colnames(normflips) <- c("flips")
normflips$set <- c(1:1000)
ggplot(normflips, aes(x = flips)) +
geom_histogram(aes(y =..density..),
bins=30,
fill = "cadetblue") +
stat_function(fun = dnorm, args = list(mean = mean(normflips$flips), sd = sd(normflips$flips)))
normal.a <- rnorm( n=1000, mean=0, sd=1 )
hist(normal.a)
?rchisq
chinorm <- rchisq(1000,3)
hist(chinorm)
?rchisq
